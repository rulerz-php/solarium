<?php

declare(strict_types=1);

namespace Tests\RulerZ\Executor;

use PHPUnit\Framework\TestCase;
use RulerZ\Context\ExecutionContext;
use Solarium\Client;
use Solarium\QueryType\Select\Query\FilterQuery;
use Solarium\QueryType\Select\Result\Result;
use Tests\RulerZ\Stub\ExecutorStub;
use Solarium\QueryType\Select\Query\Query as SelectQuery;

class FilterTraitTest extends TestCase
{
    /** @var ExecutorStub */
    private $executor;

    public function setUp()
    {
        $this->executor = new ExecutorStub();
    }

    public function testItCanApplyAFilterOnATarget()
    {
        $solrQuery = 'some Solr generated by RulerZ';

        $client = $this->createMock(Client::class);
        $selectQuery = $this->createMock(SelectQuery::class);
        $filterQuery = $this->createMock(FilterQuery::class);

        $client->method('createSelect')->willReturn($selectQuery);
        $selectQuery->method('createFilterQuery')->with('rulerz')->willReturn($filterQuery);

        $filterQuery->expects($this->once())->method('setQuery')->with($solrQuery);

        ExecutorStub::$executeReturn = $solrQuery;

        $filteretTarget = $this->executor->applyFilter($client, $parameters = [], $operators = [], new ExecutionContext());

        $this->assertSame($selectQuery, $filteretTarget, 'The trait is called and it returns the select query created by the executor');
    }

    public function testItCanExecuteTheRequestAndReturnTheResultsAsATraversableObject()
    {
        $results = ['result'];
        $solrQuery = 'some Solr generated by RulerZ';

        $client = $this->createMock(Client::class);
        $solrResult = $this->createMock(Result::class);
        $selectQuery = $this->createMock(SelectQuery::class);
        $filterQuery = $this->createMock(FilterQuery::class);

        $client->method('createSelect')->willReturn($selectQuery);
        $selectQuery->method('createFilterQuery')->with('rulerz')->willReturn($filterQuery);

        $filterQuery->expects($this->once())->method('setQuery')->with($solrQuery);
        $client->expects($this->once())->method('select')->with($selectQuery)->willReturn($solrResult);
        $solrResult->method('getIterator')->willReturn(new \ArrayIterator($results));

        ExecutorStub::$executeReturn = $solrQuery;

        $returnedResults = $this->executor->filter($client, $parameters = [], $operators = [], new ExecutionContext());

        $this->assertInstanceOf(\Traversable::class, $returnedResults);
        $this->assertEquals($results, iterator_to_array($returnedResults));
    }
}
